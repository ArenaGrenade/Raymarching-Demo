[{"/home/ag8011/Documents/projects/portfolio/src/raymarcher/Scene.jsx":"1","/home/ag8011/Documents/projects/portfolio/src/raymarcher/shaders.jsx":"2","/home/ag8011/Documents/projects/portfolio/src/raymarcher/Floor.jsx":"3","/home/ag8011/Documents/projects/portfolio/src/raymarcher/CameraController.jsx":"4","/home/ag8011/Documents/projects/portfolio/src/App.jsx":"5","/home/ag8011/Documents/projects/portfolio/src/index.js":"6","/home/ag8011/Documents/projects/portfolio/src/reportWebVitals.js":"7"},{"size":1090,"mtime":1612373887033,"results":"8","hashOfConfig":"9"},{"size":4734,"mtime":1612462446374,"results":"10","hashOfConfig":"9"},{"size":3326,"mtime":1612449829494,"results":"11","hashOfConfig":"9"},{"size":512,"mtime":1612340534184,"results":"12","hashOfConfig":"9"},{"size":448,"mtime":1612432450306,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1612256165220,"results":"14","hashOfConfig":"9"},{"size":362,"mtime":1612256165220,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uxe4s3",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ag8011/Documents/projects/portfolio/src/raymarcher/Scene.jsx",[],"/home/ag8011/Documents/projects/portfolio/src/raymarcher/shaders.jsx",[],"/home/ag8011/Documents/projects/portfolio/src/raymarcher/Floor.jsx",["31","32","33"],"import { useUpdate, useThree, useResource, useFrame } from \"react-three-fiber\"\nimport { vertexShader, fragmentShader } from \"./shaders\"\nimport { useControl } from \"react-three-gui\";\n\nimport * as THREE from \"three\"\n\nconst Floor = props => {\n    const {gl: {domElement}, camera, scene, clock} = useThree();\n    const meshRef = useUpdate(mesh => {\n        // camera.attach(mesh);\n        mesh.frustumCulled = false;\n        // scene.add(camera);\n        // camera.zoom = 0.9;\n    }, []);\n    const materialRef = useResource();\n    const helper = useResource();\n    const geometry = useResource();\n\n    const isShader = useControl(\"Marching?\", {type: \"boolean\", value: true});\n    const power = useControl(\"Power\", {type: \"number\", value: 1, min: 1, max: 10});\n    const X = useControl(\"X\", {type: \"number\", value: 0, min: -3, max: 3});\n    const Y = useControl(\"Y\", {type: \"number\", value: 0, min: -3, max: 3});\n    const Z = useControl(\"Z\", {type: \"number\", value: 0, min: -3, max: 3});\n\n    useFrame(({gl: {domElement}, camera, clock}) => {\n        meshRef.current?.position.set(0, 0, 0);\n        helper.current?.update();\n        camera.updateProjectionMatrix();\n\n        if (isShader) {\n            materialRef.current.onBeforeCompile = (shader) => materialRef.current.userData.shader = shader;\n\n            if (materialRef.current.userData.shader) {\n                const min_square = Math.min(window.innerWidth, window.innerHeight);\n                materialRef.current.userData.shader.uniforms.resolution.value = new THREE.Vector2(min_square, min_square);\n                materialRef.current.userData.shader.uniforms.viewportSize.value = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                materialRef.current.userData.shader.uniforms.time.value = clock.elapsedTime;\n                materialRef.current.userData.shader.uniforms.power.value = power;\n                materialRef.current.userData.shader.uniforms.invTransformMat.value = new THREE.Matrix4().set(\n                    1, 0, 0, -X, \n                    0, 1, 0, -Y,\n                    0, 0, 1, -Z,\n                    0, 0, 0, 0\n                );\n            }\n        }\n    });\n\n    return (\n        <>\n            <mesh ref={meshRef}>\n                <planeGeometry args={[2, 2]} ref={geometry} />\n                {isShader ? \n                    <rawShaderMaterial args={[{\n                        uniforms: {\n                            resolution: { value: new THREE.Vector2(Math.min(window.innerWidth, window.innerHeight), Math.min(window.innerWidth, window.innerHeight)) },\n                            viewportSize: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n                            time: { value: clock.elapsedTime },\n                            power: { value: power },\n                            invTransformMat: { value: new THREE.Matrix4().set(1, 0, 0, -X, 0, 1, 0, -Y, 0, 0, 1, -Z, 0, 0, 0, 1) },\n                        },\n                        vertexShader,\n                        fragmentShader\n                    }]} ref={materialRef} />\n                : <meshBasicMaterial args={[{color: 0xFF0000, side: THREE.DoubleSide}]} />}\n            </mesh>\n            {meshRef.current && <boxHelper args={[meshRef.current, 0xffff00]} ref={helper} />}\n        </>\n    )\n}\n\nexport default Floor;","/home/ag8011/Documents/projects/portfolio/src/raymarcher/CameraController.jsx",[],"/home/ag8011/Documents/projects/portfolio/src/App.jsx",[],"/home/ag8011/Documents/projects/portfolio/src/index.js",[],"/home/ag8011/Documents/projects/portfolio/src/reportWebVitals.js",[],{"ruleId":"34","severity":1,"message":"35","line":8,"column":17,"nodeType":"36","messageId":"37","endLine":8,"endColumn":27},{"ruleId":"34","severity":1,"message":"38","line":8,"column":30,"nodeType":"36","messageId":"37","endLine":8,"endColumn":36},{"ruleId":"34","severity":1,"message":"39","line":8,"column":38,"nodeType":"36","messageId":"37","endLine":8,"endColumn":43},"no-unused-vars","'domElement' is assigned a value but never used.","Identifier","unusedVar","'camera' is assigned a value but never used.","'scene' is assigned a value but never used."]