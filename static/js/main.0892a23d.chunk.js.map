{"version":3,"sources":["raymarcher/Floor.jsx","raymarcher/shaders.jsx","raymarcher/Scene.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Floor","props","useThree","clock","gl","domElement","camera","scene","meshRef","useUpdate","mesh","frustumCulled","materialRef","useResource","helper","geometry","isShader","useControl","type","value","power","min","max","X","Y","Z","useFrame","current","position","set","update","updateProjectionMatrix","onBeforeCompile","shader","userData","min_square","Math","window","innerWidth","innerHeight","uniforms","resolution","THREE","viewportSize","time","elapsedTime","invTransformMat","ref","args","vertexShader","fragmentShader","color","side","Scene","forceResize","useEffect","near","far","setSize","setPixelRatio","devicePixelRatio","left","width","right","top","height","bottom","CustomCanvas","withControls","Canvas","App","Provider","orthographic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0892a23d.chunk.js","sourcesContent":["import { useUpdate, useThree, useResource, useFrame } from \"react-three-fiber\"\nimport { vertexShader, fragmentShader } from \"./shaders\"\nimport { useControl } from \"react-three-gui\";\n\nimport * as THREE from \"three\"\n\nconst Floor = props => {\n    const {gl: {domElement}, camera, scene, clock} = useThree();\n    const meshRef = useUpdate(mesh => {\n        // camera.attach(mesh);\n        mesh.frustumCulled = false;\n        // scene.add(camera);\n        // camera.zoom = 0.9;\n    }, []);\n    const materialRef = useResource();\n    const helper = useResource();\n    const geometry = useResource();\n\n    const isShader = useControl(\"Marching?\", {type: \"boolean\", value: true});\n    const power = useControl(\"Power\", {type: \"number\", value: 1, min: 1, max: 10});\n    const X = useControl(\"X\", {type: \"number\", value: 0, min: -3, max: 3});\n    const Y = useControl(\"Y\", {type: \"number\", value: 0, min: -3, max: 3});\n    const Z = useControl(\"Z\", {type: \"number\", value: 0, min: -3, max: 3});\n\n    useFrame(({gl: {domElement}, camera, clock}) => {\n        meshRef.current?.position.set(0, 0, 0);\n        helper.current?.update();\n        camera.updateProjectionMatrix();\n\n        if (isShader) {\n            materialRef.current.onBeforeCompile = (shader) => materialRef.current.userData.shader = shader;\n\n            if (materialRef.current.userData.shader) {\n                const min_square = Math.min(window.innerWidth, window.innerHeight);\n                materialRef.current.userData.shader.uniforms.resolution.value = new THREE.Vector2(min_square, min_square);\n                materialRef.current.userData.shader.uniforms.viewportSize.value = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                materialRef.current.userData.shader.uniforms.time.value = clock.elapsedTime;\n                materialRef.current.userData.shader.uniforms.power.value = power;\n                materialRef.current.userData.shader.uniforms.invTransformMat.value = new THREE.Matrix4().set(\n                    1, 0, 0, -X, \n                    0, 1, 0, -Y,\n                    0, 0, 1, -Z,\n                    0, 0, 0, 0\n                );\n            }\n        }\n    });\n\n    return (\n        <>\n            <mesh ref={meshRef}>\n                <planeGeometry args={[2, 2]} ref={geometry} />\n                {isShader ? \n                    <rawShaderMaterial args={[{\n                        uniforms: {\n                            resolution: { value: new THREE.Vector2(Math.min(window.innerWidth, window.innerHeight), Math.min(window.innerWidth, window.innerHeight)) },\n                            viewportSize: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n                            time: { value: clock.elapsedTime },\n                            power: { value: power },\n                            invTransformMat: { value: new THREE.Matrix4().set(1, 0, 0, -X, 0, 1, 0, -Y, 0, 0, 1, -Z, 0, 0, 0, 1) },\n                        },\n                        vertexShader,\n                        fragmentShader\n                    }]} ref={materialRef} />\n                : <meshBasicMaterial args={[{color: 0xFF0000, side: THREE.DoubleSide}]} />}\n            </mesh>\n            {meshRef.current && <boxHelper args={[meshRef.current, 0xffff00]} ref={helper} />}\n        </>\n    )\n}\n\nexport default Floor;","export const vertexShader = `\n    attribute vec3 position;\n\n    void main(void) {\n        gl_Position = vec4(position, 1.0);\n    }\n`;\n\n// SDFs at http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n\nexport const fragmentShader = `\n    #define MAX_STEPS 100\n    #define MAX_DIST 100.0\n    #define SURF_DIST 0.001\n    #define PI 3.142\n\n    precision highp float;\n\n    uniform vec2 resolution;\n    uniform vec2 viewportSize;\n    uniform float time;\n    uniform float power;\n    uniform mat4 invTransformMat;\n\n    float atan2(in float y, in float x)\n    {\n        return x == 0.0 ? sign(y) * PI / 2.0 : atan(y, x);\n    }\n\n    float signedDistToSphere(vec3 p, vec4 sphere) {\n        return length(sphere.xyz - p) - sphere.w;\n    }\n\n    float signedDistToBox(vec3 p, vec3 center, vec3 size) {\n        vec3 offset = abs(p - center) - size;\n        float unsignedDist = length(max(offset, 0.0));\n        float distInsideBox = min(max(offset.x, max(offset.y, offset.z)), 0.0);\n        return unsignedDist + distInsideBox;\n    }\n\n    float signedDistToRoundedbox(vec3 p, vec3 center, vec3 size, float smoothing) {\n        return signedDistToBox(p, center, size - vec3(smoothing)) - smoothing;\n    }\n\n    float signedDistToInfiniteCylinder(vec3 p, vec2 center, float radius) {\n        return length(p.xz - center) - radius;\n    }\n\n    float signedDistToPlane(vec3 p) {\n        return p.y;\n    }\n\n    float signedDistToMandelBulb(vec3 p) {\n        vec3 z = p;\n        float dr = 1.0;\n        float r;\n\n        for (int i = 0; i < 15; i++) {\n            r = length(z);\n            if (r > 2.0) break;\n\n            float theta = acos(z.z / r) * power;\n            float phi = atan2(z.y, z.x) * power;\n            float zr = pow(r, power);\n            dr = pow(r, power - 1.0) * power * dr + 1.0;\n\n            z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n            z += p;\n        }\n\n        return 0.5 * log(r) * r / dr;\n    }\n\n    float smoothMin(float distA, float distB, float k) {\n        float h = max(k - abs(distA - distB), 0.0) / k;\n        return min(distA, distB) - h * h * h * k * 1.0 / 6.0;\n    }\n\n    vec3 transformPoint(vec3 p) {\n        return (invTransformMat * vec4(p, 1.0)).xyz;\n    }\n\n    float GetSceneDist(vec3 p) {\n        // float box = signedDistToBox(p, vec3(-1.5, 1, 6), vec3(1));\n        // float sphere = signedDistToSphere(p, vec4(1.5, 1, 6, 1));\n        // float plane = signedDistToPlane(p);\n        // float infCylinder = signedDistToInfiniteCylinder(p, vec2(0, 6), 0.5);\n        // float roundedBox = signedDistToRoundedbox(p, vec3(-1.5, 1, 6), vec3(1), 0.0);\n\n        vec3 transformed = transformPoint(p);\n        float mandelBulb = signedDistToMandelBulb(transformed);\n\n        return mandelBulb;\n    }\n\n    float RayMarch(vec3 ro, vec3 rd) {\n        float d0 = 0.0;\n\n        for (int i = 0; i < MAX_STEPS; i++) {\n            vec3 p = ro + rd * d0;\n            float dS = GetSceneDist(p);\n            d0 += dS;\n\n            if (d0 > MAX_DIST || abs(dS) < SURF_DIST) break;\n        }\n\n        return d0;\n    }\n\n    vec3 CalculateNormal (vec3 p) {\n        float d = GetSceneDist(p);\n        vec2 e = vec2(0.01, 0);\n\n        vec3 n = d - vec3(\n            GetSceneDist(p - e.xyy),\n            GetSceneDist(p - e.yxy),\n            GetSceneDist(p - e.yyx)\n        );\n\n        return normalize(n);\n    }\n\n    float CalculateLighting (vec3 p) {\n        vec3 lightPos = vec3(0, 0.6, -2);\n        vec3 l = normalize(lightPos - p);\n\n        vec3 n = CalculateNormal(p);\n\n        float diffuse = clamp(dot(n, l), 0.0, 1.0);\n\n        float d = RayMarch(p + n * SURF_DIST * 2.0, l);\n        if (d < length(lightPos - p)) diffuse *= 0.1;\n\n        return diffuse;\n    }\n\n    void main(void) {\n        // Get the scaled screen space coordinate\n        vec2 uv = (gl_FragCoord.xy - 0.5 * viewportSize) / resolution;\n\n        // Convert the ray direction from normalized screen coordinate to world space coordinate\n        vec3 ray = normalize(vec3(uv.x, uv.y, 1));\n\n        // Get Camera Position\n        vec3 cPos = vec3(0, 0, -5);\n\n        // Cast the ray and calculate the color\n        vec3 col = vec3(0.0);\n        float d = RayMarch(cPos, ray);\n\n        vec3 p = cPos + ray * d;\n        float litColor = CalculateLighting(p);\n        col = vec3(litColor);\n\n        gl_FragColor = vec4(col, 1.0);\n    }\n`;","import { useThree, useFrame } from \"react-three-fiber\"\nimport { useEffect } from \"react\";\n\nimport Floor from \"./Floor\"\n\nconst Scene = props => {\n    // The following code block runs the very first time as a setup.\n    const { gl, camera, forceResize } = useThree();\n\n    useEffect(() => {\n        camera.near = 0;\n        camera.far = 4000;\n        camera.position.set(0, 0, 0);\n\n        // Don't forget this\n        camera.updateProjectionMatrix()\n\n        gl.setSize(window.innerWidth, window.innerHeight);  \n        gl.setPixelRatio(window.devicePixelRatio);\n        forceResize();\n    // eslint-disable-next-line\n    }, []);\n\n    useFrame(({gl: {domElement}, camera}) => {\n        camera.left = - domElement.width / 2;\n        camera.right = domElement.width / 2;\n        camera.top = domElement.height / 2;\n        camera.bottom = - domElement.height / 2;\n        camera.updateProjectionMatrix();\n    })\n\n    return (\n        <>\n            <Floor />\n            <axesHelper args={[300]} />\n            {/*<cameraHelper args={[camera]} />*/}\n        </>\n    )\n}\n\nexport default Scene;\n","import Scene from \"./raymarcher/Scene\";\nimport { Controls, withControls } from 'react-three-gui';\nimport { Canvas } from 'react-three-fiber'\nimport './App.css';\n\nconst CustomCanvas = withControls(Canvas);\n\nconst App = () => {\n  return (\n    <Controls.Provider>\n      <CustomCanvas orthographic camera={[-1, 1, 1, -1, 0, 1]}>\n        <Scene />\n      </CustomCanvas>\n      <Controls width={320}/>\n    </Controls.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}